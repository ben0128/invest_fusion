services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - price-fetch-service
      - user-auth-service

  price-fetch-service:
    build:
      context: ./backend/price-fetch-service
      dockerfile: Dockerfile
    ports:
      - "3100:3000"
    environment:
      - NODE_ENV=production
      # 開發環境
      # - NODE_ENV=development
    depends_on:
      - redis
      - kafka

  price-distribution-service:
    build:
      context: ./backend/price-distribution-service
      dockerfile: Dockerfile
    ports:
      - "3300:3000"
    environment:
      - NODE_ENV=production
      # 開發環境
      # - NODE_ENV=development
    depends_on:
      - redis
      - kafka

  user-auth-service:
    build:
      context: ./backend/user-auth-service
      dockerfile: Dockerfile
    ports:
      - "3200:3000"
    environment:
      - NODE_ENV=production
      # 開發環境
      # - NODE_ENV=development
    depends_on:
      - redis
      - kafka

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data  # 將數據持久化

  kafka:
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_ENABLE_KRAFT=yes
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - kafka_data:/bitnami/kafka

volumes:
  redis_data: {}  # 定義卷
  kafka_data: {}  # 定義卷