services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - price-fetch-service
      - user-auth-service
      - price-distribution-service
      - redis
      - kafka
      - mongodb
    volumes:
      - ./frontend/:/frontend
      - ./frontend/node_modules:/frontend/node_modules

  price-fetch-service:
    build:
      context: ./backend/price-fetch-service
      dockerfile: Dockerfile
    ports:
      - "3100:3000"
    env_file:
      - ./backend/price-fetch-service/.env
    environment:
      # - NODE_ENV=production
      - NODE_ENV=development
    depends_on:
      - redis
      - kafka
      - mongodb
    volumes:
      - ./backend/price-fetch-service/:/backend/price-fetch-service
      - ./backend/price-fetch-service/node_modules:/backend/price-fetch-service/node_modules

  price-distribution-service:
    build:
      context: ./backend/price-distribution-service
      dockerfile: Dockerfile
    ports:
      - "3300:3000"
    env_file:
      - ./backend/price-distribution-service/.env
    environment:
      # - NODE_ENV=production
      - NODE_ENV=development
    depends_on:
      - redis
      - kafka
      - mongodb
    volumes:
      - ./backend/price-distribution-service/:/backend/price-distribution-service
      - ./backend/price-distribution-service/node_modules:/backend/price-distribution-service/node_modules

  user-auth-service:
    build:
      context: ./backend/user-auth-service
      dockerfile: Dockerfile
    ports:
      - "3200:3000"
    env_file:
      - ./backend/user-auth-service/.env
    environment:
      # - NODE_ENV=production
      # 開發環境
      - NODE_ENV=development
    depends_on:
      - redis
      - mongodb
      # - kafka
    volumes:
      - ./backend/user-auth-service/:/backend/user-auth-service
      - ./backend/user-auth-service/node_modules:/backend/user-auth-service/node_modules

  redis:
    image: redis:latest
    pull_policy: if_not_present
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data  # 將數據持久化

  kafka:
    image: bitnami/kafka:latest
    pull_policy: if_not_present
    ports:
      - '9092:9092'
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    restart: unless-stopped
    deploy:
      update_config:
        parallelism: 1
        order: stop-first
        failure_action: rollback
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    volumes:
      - kafka_data:/bitnami/kafka

  mongodb:
    image: mongo:latest
    pull_policy: if_not_present
    ports:
      - '27017:27017'
    environment:
      - MONGO_INITDB_DATABASE=invest_fusion
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin
    volumes:
      - mongodb_data:/data/db

volumes:
  redis_data: {}  # 定義卷
  kafka_data: {}  # 定義卷
  mongodb_data: {}  # 定義卷
